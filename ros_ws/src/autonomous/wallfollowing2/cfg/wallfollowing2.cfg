#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
PACKAGE = "wallfollowing2"

gen = ParameterGenerator()

gen.add('min_throttle', double_t, 0, "Specifies the minimum speed.", 0.2, 0, 1)
gen.add('max_throttle', double_t, 0, "Specifies the maximum speed.", 1.0, 0, 1)

gen.add('radius_lower', double_t, 0, "Specifies a lower radius, used to calculate a speed limit.", 2, 0.001)
gen.add('radius_upper', double_t, 0, "Specifies a upper radius, used to calculate a speed limit.", 30, 0.001)

gen.add('steering_slow_down', double_t, 0, "Used to calculate the speed limit error.", 4, 0)
gen.add('steering_slow_down_dead_zone', double_t, 0, "Used to calculate the speed limit error.", 0.2, 0)

gen.add('high_speed_steering_limit', double_t, 0, "Used to calculate the steering angle.", 0.5, 0)
gen.add('high_speed_steering_limit_dead_zone', double_t, 0, "Used to calculate the steering angle.", 0.2, 0)

gen.add('max_acceleration', double_t, 0, "Specifies the maximum acceleration.", 0.4, 0)

gen.add('corner_cutting', double_t, 0, "Used to calculate the predicted car position.", 1.4, 0)
gen.add('straight_smoothing', double_t, 0, "Used to calculate the predicted car position.", 1.0, 0)

gen.add('barrier_size_realtive', double_t, 0, "Used to calculate the start and end point of the barrier. The barrier is the distance the car can drive straight.", 0.1, 0)
gen.add('barrier_lower_limit', double_t, 0, "Used to calulate the speed limit at the end of straight track sections.", 1, 0)
gen.add('barrier_upper_limit', double_t, 0, "Used to calulate the speed limit at the end of straight track sections.", 5, 0)#15 by default
gen.add('barrier_exponent', double_t, 0, "Used to calulate the speed limit at the end of straight track sections.", 1.4, 0)

gen.add('controller_p', double_t, 0, "Specifies the proportional value of the PID controller.", 4)
gen.add('controller_i', double_t, 0, "Specifies the integral value of the PID controller.", 0.2)
gen.add('controller_d', double_t, 0, "Specifies the derivative value of the PID controller.", 0.02)

gen.add('usable_laser_range', double_t, 0, "The size of the part of the laser scan that should be used by the algorithm, in degrees.", 220, 90, 271)

exit(gen.generate(PACKAGE, "wallfollowing2", "wallfollowing2"))
